#+TITLE: Emacs Configuration

* Minibuffer增强(命令补全)
::todo


* TODO 程序语言服务器(LSP)
lsp-mode

* TODO Template
使用yasnippet

* TODO 搜索 跳转和替换
** 项目内搜索
** buffer内搜索
** 可视范围内跳转
** buffer内正则替换
** 多光标： multiple-cursors

* TODO Terminal
** 真 Terminal： emacs-libvterm
** 模拟 terminal: eshell

* TODO 窗口、工作空间管理
** edwina
** winum
** eyebrowse
** exwm

* TODO 字体
* TODO Mode line
what's the fuck?

* Golang Mode Configuration

* Haskell Model配置

* KeyBinding Configuration

* Other Configuration
#+begin_src emacs-lisp
;; nerd-icons
;;(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/nerd-icons"))
;;(require 'nerd-icons)

;; modeline
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))

(set-face-background 'mode-line nil)

(use-package which-key
  :config
  (progn
    (which-key-mode)
    (which-key-setup-side-window-bottom)))

;; Line Number
(use-package linum
  :init
  (progn
    (global-linum-mode t)
    (setq linum-format "%4d ")
    (set-face-background 'linum nil)
    ))

#+end_src

** Auto Complete Configuration.

** Treemacs
   #+begin_src emacs-lisp
   (use-package treemacs
     :ensure t
     :defer t
     :init
     (with-eval-after-load 'winum
       (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
     :config
     (progn
       (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	     treemacs-deferred-git-apply-delay      0.5
	     treemacs-directory-name-transformer    #'identity
	     treemacs-display-in-side-window        t
	     treemacs-eldoc-display                 t
	     treemacs-file-event-delay              5000
	     treemacs-file-extension-regex          treemacs-last-period-regex-value
	     treemacs-file-follow-delay             0.2
	     treemacs-file-name-transformer         #'identity
	     treemacs-follow-after-init             t
	     treemacs-git-command-pipe              ""
	     treemacs-goto-tag-strategy             'refetch-index
	     treemacs-indentation                   2
	     treemacs-indentation-string            " "
	     treemacs-is-never-other-window         nil
	     treemacs-max-git-entries               5000
	     treemacs-missing-project-action        'ask
	     treemacs-no-png-images                 nil
	     treemacs-no-delete-other-windows       t
	     treemacs-project-follow-cleanup        nil
	     treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	     treemacs-position                      'left
	     treemacs-recenter-distance             0.1
	     treemacs-recenter-after-file-follow    nil
	     treemacs-recenter-after-tag-follow     nil
	     treemacs-recenter-after-project-jump   'always
	     treemacs-recenter-after-project-expand 'on-distance
	     treemacs-show-cursor                   nil
	     treemacs-show-hidden-files             t
	     treemacs-silent-filewatch              nil
	     treemacs-silent-refresh                nil
	     treemacs-sorting                       'alphabetic-asc
	     treemacs-space-between-root-nodes      t
	     treemacs-tag-follow-cleanup            t
	     treemacs-tag-follow-delay              1.5
	     treemacs-user-mode-line-format         nil
	     treemacs-width                         35)

       ;; The default width and height of the icons is 22 pixels. If you are
       ;; using a Hi-DPI display, uncomment this to double the icon size.
       ;;(treemacs-resize-icons 44)

       (treemacs-follow-mode t)
       (treemacs-filewatch-mode t)
       (treemacs-fringe-indicator-mode t)
       (pcase (cons (not (null (executable-find "git")))
		    (not (null treemacs-python-executable)))
	 (`(t . t)
	  (treemacs-git-mode 'deferred))
	 (`(t . _)
	  (treemacs-git-mode 'simple))))
     :bind
     (:map global-map
	   ("M-0"       . treemacs-select-window)
	   ("C-x t 1"   . treemacs-delete-other-windows)
	   ("C-x t t"   . treemacs)
	   ("C-x t B"   . treemacs-bookmark)
	   ("C-x t C-t" . treemacs-find-file)
	   ("C-x t M-t" . treemacs-find-tag)))

   (use-package treemacs-evil
     :after treemacs evil
     :ensure t)

   (use-package treemacs-projectile
     :after treemacs projectile
     :ensure t)

   (use-package treemacs-icons-dired
     :after treemacs dired
     :ensure t
     :config (treemacs-icons-dired-mode))

   (use-package treemacs-magit
     :after treemacs magit
     :ensure t)

   (use-package treemacs-persp
     :after treemacs persp-mode
     :ensure t
     :config (treemacs-set-scope-type 'Perspectives))

   (use-package lsp-treemacs
     :commands lsp-treemacs-errors-list
     :config
     (lsp-metals-treeview-enable t)
     (setq lsp-metals-treeview-show-when-views-received t))
   #+end_src


** 未分类
#+begin_src emacs-lisp
;; Neotree Sidebar
(use-package neotree
  :custom
  (neo-theme 'nerd2)
  :config
  (progn
    (setq neo-smart-open t)
    (setq neo-theme (if (display-graphic-p) 'icons 'nerd))
    (setq neo-window-fixed-size nil)
    ;; (setq-default neo-show-hidden-files nil)
    (global-set-key [f2] 'neotree-toggle)
    (global-set-key [f8] 'neotree-dir)
    ))

;; all-the-icons package config
(use-package all-the-icons
  :config
  (unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t))
  )


;; Keybind
(global-set-key (kbd "C-/") 'comment-line)

;; add hook
;; brace-pattern highlight
(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
#+end_src
